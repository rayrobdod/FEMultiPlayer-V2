buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
	}
}

apply plugin: 'java'
apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.deprecation = true
[compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:unchecked"]

sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs = [ "." ]
sourceSets.main.resources.filter.include "levels/"
sourceSets.main.resources.filter.include "shaders/"
sourceSets.main.resources.filter.include "res/"
sourceSets.test.java.srcDirs = [ "test/" ]

// name = 'FEMP'
version = 'SNAPSHOT'

repositories {
	mavenCentral()
}

dependencies {
	compile files("json-simple/json-simple-1.1.1.jar")
	compile files("lwjgl-2.9.0/jar/lwjgl.jar")
	compile files("lwjgl-2.9.0/jar/slick-util.jar")
	compile files("lwjgl-2.9.0/jar/jogg-0.0.7.jar")
	compile files("lwjgl-2.9.0/jar/jorbis-0.0.15.jar")
	compile files("lwjgl-2.9.0/jar/jarsplice-0.40.jar")
	testCompile("org.junit.jupiter:junit-jupiter-api:5.0.2")
	testCompile("junit:junit:4.12")
	testRuntime("org.junit.vintage:junit-vintage-engine:4.12.2")
	testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.2")
}

// there are tests that do require lwjgl to run
test.systemProperties = ["java.library.path" : ("lwjgl-2.9.0/native/" + System.getProperty("os.name").split(" ")[0])]
junitPlatformTest.systemProperties = test.systemProperties

junitPlatform.filters.tags {
	// the `display` tag refers to tests that need to create a opengl display to run
	
	// Tests with these tags will not run in a headless environment
	if (project.hasProperty("enableAllJunitTags")) {
		// do nothing
	} else {
		exclude 'display'
	}
}

/**
 * Create a new FileCollection that is similar to the input, but replaces any
 * non-directories (assumed to be zip files) with it's contents
 */
def expandZips(FileCollection inputs) {
	FileCollection retval = files()
	inputs.forEach{f ->
		if (f.isDirectory()) {
			retval = retval + files(f)
		} else {
			retval = retval + zipTree(f)
		}
	}
	return retval;
}


task fatjarMain(dependsOn: classes, type: Jar) {
	description 'Creates a Jar that contains a FEMP Client instance'
	
	// delay execution of expandZips unitil after the classpath is created
	from({ -> expandZips(sourceSets.main.runtimeClasspath)})
	from("lwjgl-2.9.0/native/linux")
	from("lwjgl-2.9.0/native/macosx")
	from("lwjgl-2.9.0/native/windows")
	destinationDir(project.distsDir)
	baseName = "Fire Emblem Multiplayer"
//	entryCompression = org.gradle.api.tasks.bundling.ZipEntryCompression.STORED
	manifest.attributes (
		  'Launcher-Main-Class' : 'net.fe.FEMultiplayer'
		, 'Launcher-VM-Args': ''
		, 'Main-Class': 'org.ninjacave.jarsplice.JarSpliceLauncher'
		, 'Class-Path' : '.'
	)
}

task fatjarLevels(dependsOn: classes, type: Jar) {
	description 'Creates a Jar that contains a level editor'
	
	from({ -> expandZips(sourceSets.main.runtimeClasspath)}) {
		exclude "res/**/*.wav"
		exclude "res/battle_anim/"
		exclude "res/gui/"
		exclude "res/map_mugshots/"
		exclude "res/map_anim/"
		exclude "res/palette/"
		exclude "levels/"
	}
	from("lwjgl-2.9.0/native/linux")
	from("lwjgl-2.9.0/native/macosx")
	from("lwjgl-2.9.0/native/windows")
	destinationDir(project.distsDir)
	baseName = "Fire Emblem Multiplayer"
	appendix = "levelEditor"
	manifest.attributes (
		  'Launcher-Main-Class' : 'net.fe.editor.LevelEditor'
		, 'Launcher-VM-Args': ''
		, 'Main-Class': 'org.ninjacave.jarsplice.JarSpliceLauncher'
		, 'Class-Path' : '.'
	)
}

task fatjarServer(dependsOn: classes, type: Jar) {
	description 'Creates a Jar that contains a FEMP Server instance'
	
	from({ -> expandZips(sourceSets.main.runtimeClasspath)}) {
		exclude "shaders/**"
		exclude "res/**/*.png"
		exclude "res/**/*.wav"
	}
	destinationDir(project.distsDir)
	baseName = "Fire Emblem Multiplayer"
	appendix = "server"
	manifest.attributes (
		  'Main-Class' : 'net.fe.network.FEServer'
	)
}

assemble.dependsOn(fatjarMain)
assemble.dependsOn(fatjarLevels)
assemble.dependsOn(fatjarServer)


task runMain(dependsOn: classes, type: JavaExec) {
	group 'Runner'
	description 'Run a FEMP client instance'
	
	main = "net.fe.FEMultiplayer"
	classpath = sourceSets.main.runtimeClasspath
	ignoreExitValue = true
	systemProperties = [
		"java.library.path" : ("lwjgl-2.9.0/native/" + System.getProperty("os.name").split(" ")[0]),
	]
}

task runStats(dependsOn: classes, type: JavaExec) {
	group 'Runner'
	description 'Runs the stat balancer'
	
	main = "net.fe.balance.StatBalancer"
	classpath = sourceSets.main.runtimeClasspath
	ignoreExitValue = true
	systemProperties = [
		"java.library.path" : ("lwjgl-2.9.0/native/" + System.getProperty("os.name").split(" ")[0]),
	]
}

task runLevels(dependsOn: classes, type: JavaExec) {
	group 'Runner'
	description 'Runs the level editor'
	
	main = "net.fe.editor.LevelEditor"
	classpath = sourceSets.main.runtimeClasspath
	ignoreExitValue = true
	systemProperties = [
		"java.library.path" : ("lwjgl-2.9.0/native/" + System.getProperty("os.name").split(" ")[0]),
	]
}

task runServer(dependsOn: classes, type: JavaExec) {
	group 'Runner'
	description 'Run a FEMP server instance'
	
	main = "net.fe.network.FEServer"
	classpath = sourceSets.main.runtimeClasspath
	ignoreExitValue = true
}
